(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[725],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return s},kt:function(){return h}});var o=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,o,i=function(e,t){if(null==e)return{};var r,o,i={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=o.createContext({}),c=function(e){var t=o.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=c(e.components);return o.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var r=e.components,i=e.mdxType,n=e.originalType,u=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),p=c(r),h=i,m=p["".concat(u,".").concat(h)]||p[h]||d[h]||n;return r?o.createElement(m,l(l({ref:t},s),{},{components:r})):o.createElement(m,l({ref:t},s))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=r.length,l=new Array(n);l[0]=p;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var c=2;c<n;c++)l[c]=r[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}p.displayName="MDXCreateElement"},228:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return a},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var o=r(2122),i=r(9756),n=(r(7294),r(3905)),l=["components"],a={},u="Build PyTorch iOS Libraries from Source",c={unversionedId:"building/iosbuild",id:"building/iosbuild",isDocsHomePage:!1,title:"Build PyTorch iOS Libraries from Source",description:"To track the latest updates for iOS, you can build the PyTorch iOS libraries from the source code.",source:"@site/docs/building/iosbuild.md",sourceDirName:"building",slug:"/building/iosbuild",permalink:"/docs/building/iosbuild",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/building/iosbuild.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Building PyTorch Android from Source",permalink:"/docs/building/androidbuild"},next:{title:"Android",permalink:"/docs/android"}},s=[{value:"Build LibTorch for iOS Simulators",id:"build-libtorch-for-ios-simulators",children:[]},{value:"Build LibTorch for arm64 Devices",id:"build-libtorch-for-arm64-devices",children:[]},{value:"XCode Setup",id:"xcode-setup",children:[]},{value:"Custom Build",id:"custom-build",children:[]}],d={toc:s};function p(e){var t=e.components,r=(0,i.Z)(e,l);return(0,n.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"build-pytorch-ios-libraries-from-source"},"Build PyTorch iOS Libraries from Source"),(0,n.kt)("p",null,"To track the latest updates for iOS, you can build the PyTorch iOS libraries from the source code."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"git clone --recursive https://github.com/pytorch/pytorch\ncd pytorch\n# if you are updating an existing checkout\ngit submodule sync\ngit submodule update --init --recursive\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Make sure you have ",(0,n.kt)("inlineCode",{parentName:"p"},"cmake")," and Python installed correctly on your local machine. We recommend following the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/pytorch/pytorch"},"Pytorch Github page")," to set up the Python development environment")),(0,n.kt)("h3",{id:"build-libtorch-for-ios-simulators"},"Build LibTorch for iOS Simulators"),(0,n.kt)("p",null,"Open terminal and navigate to the PyTorch root directory. Run the following command (if you already build LibTorch for iOS devices (see below), run ",(0,n.kt)("inlineCode",{parentName:"p"},"rm -rf build_ios")," first):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"BUILD_PYTORCH_MOBILE=1 IOS_PLATFORM=SIMULATOR ./scripts/build_ios.sh\n")),(0,n.kt)("p",null,"After the build succeeds, all static libraries and header files will be generated under ",(0,n.kt)("inlineCode",{parentName:"p"},"build_ios/install")),(0,n.kt)("h3",{id:"build-libtorch-for-arm64-devices"},"Build LibTorch for arm64 Devices"),(0,n.kt)("p",null,"Open terminal and navigate to the PyTorch root directory. Run the following command (if you already build LibTorch for iOS simulators, run ",(0,n.kt)("inlineCode",{parentName:"p"},"rm -rf build_ios")," first):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"BUILD_PYTORCH_MOBILE=1 IOS_ARCH=arm64 ./scripts/build_ios.sh\n")),(0,n.kt)("p",null,"After the build succeeds, all static libraries and header files will be generated under ",(0,n.kt)("inlineCode",{parentName:"p"},"build_ios/install")),(0,n.kt)("h3",{id:"xcode-setup"},"XCode Setup"),(0,n.kt)("p",null,"Open your project in XCode, go to your project Target's ",(0,n.kt)("inlineCode",{parentName:"p"},"Build Phases")," - ",(0,n.kt)("inlineCode",{parentName:"p"},"Link Binaries With Libraries"),", click the + sign and add all the library files located in ",(0,n.kt)("inlineCode",{parentName:"p"},"build_ios/install/lib"),". Navigate to the project ",(0,n.kt)("inlineCode",{parentName:"p"},"Build Settings"),", set the value ",(0,n.kt)("strong",{parentName:"p"},"Header Search Paths")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"build_ios/install/include")," and ",(0,n.kt)("strong",{parentName:"p"},"Library Search Paths")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"build_ios/install/lib"),"."),(0,n.kt)("p",null,"In the build settings, search for ",(0,n.kt)("strong",{parentName:"p"},"other linker flags"),".  Add a custom linker flag below"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"-all_load\n")),(0,n.kt)("p",null,"To use the custom built libraries the project, replace ",(0,n.kt)("inlineCode",{parentName:"p"},"#import <LibTorch/LibTorch.h>")," (in ",(0,n.kt)("inlineCode",{parentName:"p"},"TorchModule.mm"),") which is needed when using LibTorch via Cocoapods with the code below:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'#include "ATen/ATen.h"\n#include "caffe2/core/timer.h"\n#include "caffe2/utils/string_utils.h"\n#include "torch/csrc/autograd/grad_mode.h"\n#include "torch/csrc/jit/mobile/import.h"\n#include "torch/csrc/jit/mobile/module.h"\n#include "torch/script.h"\n')),(0,n.kt)("p",null,"Finally, disable bitcode for your target by selecting the Build Settings, searching for ",(0,n.kt)("strong",{parentName:"p"},"Enable Bitcode"),", and set the value to ",(0,n.kt)("strong",{parentName:"p"},"No"),"."),(0,n.kt)("h2",{id:"custom-build"},"Custom Build"),(0,n.kt)("p",null,"Starting from 1.4.0, PyTorch supports custom build. You can now build the PyTorch library that only contains the operators needed by your model. To do that, follow the steps below"),(0,n.kt)("p",null,"1","."," Verify your PyTorch version is 1.4.0 or above. You can do that by checking the value of ",(0,n.kt)("inlineCode",{parentName:"p"},"torch.__version__"),"."),(0,n.kt)("p",null,"2","."," To dump the operators in your model, say ",(0,n.kt)("inlineCode",{parentName:"p"},"MobileNetV2"),", run the following lines of Python code:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"import torch, yaml\nmodel = torch.jit.load('MobileNetV2.pt')\nops = torch.jit.export_opnames(model)\nwith open('MobileNetV2.yaml', 'w') as output:\n    yaml.dump(ops, output)\n")),(0,n.kt)("p",null,"In the snippet above, you first need to load the ScriptModule. Then, use ",(0,n.kt)("inlineCode",{parentName:"p"},"export_opnames")," to return a list of operator names of the ScriptModule and its submodules. Lastly, save the result in a yaml file."),(0,n.kt)("p",null,"3","."," To run the iOS build script locally with the prepared yaml list of operators, pass in the yaml file generate from the last step into the environment variable ",(0,n.kt)("inlineCode",{parentName:"p"},"SELECTED_OP_LIST"),". Also in the arguments, specify ",(0,n.kt)("inlineCode",{parentName:"p"},"BUILD_PYTORCH_MOBILE=1")," as well as the platform/architechture type. Take the arm64 build for example, the command should be:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"SELECTED_OP_LIST=MobileNetV2.yaml BUILD_PYTORCH_MOBILE=1 IOS_ARCH=arm64 ./scripts/build_ios.sh\n")),(0,n.kt)("p",null,"4","."," After the build succeeds, you can integrate the result libraries to your project by following the ",(0,n.kt)("a",{parentName:"p",href:"#xcode-setup"},"XCode Setup")," section above."),(0,n.kt)("p",null,"5","."," The last step is to add a single line of C++ code before running ",(0,n.kt)("inlineCode",{parentName:"p"},"forward"),". This is because by default JIT will do some optimizations on operators (fusion for example), which might break the consistency with the ops we dumped from the model."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"torch::jit::GraphOptimizerEnabledGuard guard(false);\n")))}p.isMDXComponent=!0}}]);
(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[605],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return m}});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),s=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=n,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return r?o.createElement(h,a(a({ref:t},p),{},{components:r})):o.createElement(h,a({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,a[1]=l;for(var s=2;s<i;s++)a[s]=r[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2756:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var o=r(2122),n=r(9756),i=(r(7294),r(3905)),a=["components"],l={id:"ios",sidebar_position:6},c="iOS",s={unversionedId:"ios",id:"ios",isDocsHomePage:!1,title:"iOS",description:"To get started with PyTorch on iOS, we recommend exploring the following HelloWorld.",source:"@site/docs/ios.md",sourceDirName:".",slug:"/ios",permalink:"/docs/ios",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/ios.md",version:"current",sidebarPosition:6,frontMatter:{id:"ios",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Android",permalink:"/docs/android"}},p=[{value:"Quickstart with a Hello World Example",id:"quickstart-with-a-hello-world-example",children:[{value:"Model Preparation",id:"model-preparation",children:[]}]}],u={toc:p};function d(e){var t=e.components,r=(0,n.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ios"},"iOS"),(0,i.kt)("p",null,"To get started with PyTorch on iOS, we recommend exploring the following ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/pytorch/ios-demo-app/tree/master/HelloWorld"},"HelloWorld"),"."),(0,i.kt)("h2",{id:"quickstart-with-a-hello-world-example"},"Quickstart with a Hello World Example"),(0,i.kt)("p",null,"HelloWorld is a simple image classification application that demonstrates how to use PyTorch C++ libraries on iOS. The code is written in Swift and uses Objective-C as a bridge."),(0,i.kt)("h3",{id:"model-preparation"},"Model Preparation"),(0,i.kt)("p",null,"Let's start with model preparation. If you are familiar with PyTorch, you probably should already know how to train and save your model. In case you don't, we are going to use a pre-trained image classification model - ",(0,i.kt)("a",{parentName:"p",href:"https://pytorch.org/hub/pytorch_vision_mobilenet_v2/"},"MobileNet v2"),", which is already packaged in ",(0,i.kt)("a",{parentName:"p",href:"https://pytorch.org/docs/stable/torchvision/index.html"},"TorchVision"),". To install it, run the command below."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"We highly recommend following the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/pytorch/pytorch"},"Pytorch Github page")," to set up the Python development environment on your local machine.")))}d.isMDXComponent=!0}}]);